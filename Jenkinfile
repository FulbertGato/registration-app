pipeline {
    agent { label 'jenkins-agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }
    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "sukedev"
        DOCKER_PASS = credentials('dockerhub')  // Using Jenkins credentials for security
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'gato-github', url: 'https://github.com/FulbertGato/registration-app'
            }
        }

        stage("Update the Deployment Tags") {
            steps {
                script {
                    if (fileExists('regapp-deploy.yml')) {
                        sh """
                           cat regapp-deploy.yml
                           sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' regapp-deploy.yml
                           cat regapp-deploy.yml
                        """
                    } else {
                        error "regapp-deploy.yml file not found"
                    }
                }
            }
        }

        stage("Push the changed deployment file to Git") {
            steps {
                script {
                    if (fileExists('regapp-deploy.yml')) {
                        sh """
                           git config --global user.name "FulbertGato"
                           git config --global user.email "gatojunior.co@gmail.com"
                           git add regapp-deploy.yml
                           git commit -m "Updated Deployment Manifest"
                        """
                        withCredentials([usernamePassword(credentialsId: 'gato-github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                          sh """
                             git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/FulbertGato/registration-app.git
                             git push origin main
                          """
                        }
                    } else {
                        error "regapp-deploy.yml file not found, skipping push"
                    }
                }
            }
        }

        stage("Build Application") {
            steps {
                sh "mvn clean package"
            }
        }

        stage("Test Application") {
            steps {
                sh "mvn test"
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') { 
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    // Ensure the .war file is present
                    sh 'ls webapp/target/*.war'

                    // Move the .war file to the current directory for Dockerfile
                    sh 'cp webapp/target/*.war .'

                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        def dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f Dockerfile .")

                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
             // Clean up Docker to free space
                    sh """
                       docker container prune -f
                       docker image prune -a -f
                       docker volume prune -f
                       docker network prune -f
                    """
                    // Run Trivy scan
                    sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:latest --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table"
                }
            }
        }

        stage('Cleanup Artifacts') {
            steps {
                script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh "curl -v -k --user clouduser:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' 'a5a192141dd9741aa83b46b0aed9ba89-1566505811.ap-south-1.elb.amazonaws.com:8080/job/gitops-register-app-cd/buildWithParameters?token=gitops-token'"
                }
            }
        }
    }
}
