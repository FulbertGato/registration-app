pipeline {
    agent { label 'jenkins-agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }
    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "sukedev"
        DOCKER_PASS = credentials('dockerhub')  // Using Jenkins credentials for security
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'gato-github', url: 'https://github.com/FulbertGato/registration-app'
            }
        }

        stage("Update the Deployment Tags") {
            steps {
                script {
                    if (fileExists('deployment.yaml')) {
                        sh """
                           cat deployment.yaml
                           sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' deployment.yaml
                           cat deployment.yaml
                        """
                    } else {
                        error "deployment.yaml file not found"
                    }
                }
            }
        }

        stage("Push the changed deployment file to Git") {
            steps {
                script {
                    if (fileExists('deployment.yaml')) {
                        sh """
                           git config --global user.name "FulbertGato"
                           git config --global user.email "gatojunior.co@gmail.com"
                           git add deployment.yaml
                           git commit -m "Updated Deployment Manifest"
                        """
                        withCredentials([gitUsernamePassword(credentialsId: 'gato-github', gitToolName: 'Default')]) {
                          sh "git push https://github.com/FulbertGato/registration-app main"
                        }
                    } else {
                        error "deployment.yaml file not found, skipping push"
                    }
                }
            }
        }

        stage("Build Application") {
            steps {
                sh "mvn clean package"
            }
        }

        stage("Test Application") {
            steps {
                sh "mvn test"
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') { 
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }
        
